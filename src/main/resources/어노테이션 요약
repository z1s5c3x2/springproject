- 어노테이션
1. 스프링
	@SpringBootApplication		스프링부트 실행해주는 어노테이션
	@ServletComponentScan		서블릿을 찾아서 컨테이너에 빈 등록
	@Autowired         		    Spring 컨테이너에서 빈 을 찾아 주입하는 역할하는 어노테이션

2. MVC
    @Controller         	Spring에서 컨트롤러를 지정하기 위한 어노테이션 [ spring 컨테이너에 빈 등록 ]
    @RestController        	Spring에서 컨트롤러를 지정하기 위한 어노테이션 + @ResponseBody [ spring 컨테이너에 빈 등록 ]
    @ResponseBody       	서버가 클라이언트로 전송하는 Http 응답의 Body의 내용을 JavaObject를 json 기반의 HTTP Body로 변환시켜주는 어노테이션
	@RequestMapping         클라이언트가 서버로 전송하는 Http 요청에 맞는 클래스나 메서드를 연결시켜주는 어노테이션
	@GetMapping			    HTTP 요청 GET 함수 매핑
	@PostMapping			HTTP 요청 Post 함수 매핑
	@PutMapping			    HTTP 요청 Put 함수 매핑
	@DeleteMapping			HTTP 요청 Delete 함수 매핑
    @Service            	Spring에서 서비스를 지정하기 위한 어노테이션 [ spring 컨테이너에 빈 등록 ]
	@Component          	Spring 컨테이너에 빈 등록 해주는 어노테이션
		@RequestParam       클라이언트가 서버로 전송하는 Http 요청의 URL매개변수 의 내용을 JavaObject로 변환시켜주는 어노테이션[ URL?매개변수=값?매개변수=값 ]
		@RequestBody        클라이언트가 서버로 전송하는 Http 요청의 Body의 내용을 JavaObject로 변환시켜주는 어노테이션
		- @ModelAttribute     쿼리스트링 형식의 요청 매개변수를 객체로 매핑
		- @PathVariable       경로상의 매개변수 형식의 요청 매개변수 매핑              URL/값/값
    @Repository             Spring에서 리포지토리를 지정하기 위한 어노테이션[spring 컨테이너에 빈 등록]

3. lombok
	@NoArgsConstructor		빈생성자 자동 생성
	@AllArgsConstructor		풀생성자 자동 생성
	@Getter				    필드의 getter메소드 자동 생성
	@Setter				    필드의 setter메소드 자동 생성
	@ToString			    필드의 toString메소드 자동 생성
	@Builder				필더 패턴 [ 유연하게(생성자 단점 보완 ) 객체 생성 도와주는 함수 제공 ]

	@ToString.Exclude       : ToString() 함수 제외 [ 필드에 선언 ]
	@Builder.Default        : Builder 패턴 사용시 필드 값을 초기값으로 사용 [필드에 선언 ]

4. JPA
    1. entity
        @Entity : DB 테이블에 대응하는 하나의 클래스 [ 클래스에 선언 ]
        @Table( name = "테이블명") : DB테이블명 정의 [ 클래스에 선언 ]
        @Id : PK 선언 [ 필드에 선언 ]
        @GeneratedValue( strategy = GenerationType.IDENTITY )  : auto_increment 선언 [ 필드에 선언 ]
        @ColumnDefault("숫자") @ColumnDefault("'문자'") : 필드 초기값[ 필드에 선언 ]
        @DynamicInsert          : @ColumnDefault 가 적용될수 있도록 해주는 어노테이션 [ 클래스에 선언 ]
            name = ""
            length = "최대문자수"
            nullable = false
            unique = true
            columnDefinition = "실제DB자료형"
        @Column( name="필드명" , length = "최대문자수" , nullable = false) [ 필드에 선언 ]
            객체 필드를 테이블 컬럼에 매핑
        - DB와 엔티티 자료형 차이
                DB                        JAVA[엔티티]
                varchar                   String
                int                       int
                detetime                  LocalDateTime
                longtext                  @Column( columnDefinition = "longtext" )
    2.
        @Transactional          :하나/여럿 작업[SQL] 들을 묶어서 최소단위 업무처리

    3. Jpa Auditing
        1. @EnableJpaAuditing   : JPA 엔티티 감지기능 실행 / 스프링부트 시작 클래스와 같이 주입
        2. @MappedSuperclass    : 엔티티에게 상속주는 클래스일경우 [ 서로 다른 엔티티간의 공통 필드 묶을때 ]
                                + 일반 상속[ 기본 자바 ]은 @메타 어노테이션 상속불가능
                                @MappedSuperclass : 매핑 필드[ @CreatedDate , @LastModifiedDate ]까지 상속기능
                                공통 매핑 정보가 필요 할 때 부모 클래스에 선언 후 상속받아서 사용

        3. @EntityListeners( AuditingEntityListener.class ) 해당 필드를 사용하는 엔티티 감지 적용
                                @EntityListeners : 엔티티에서 특정 이벤트[DML->SERVICE]가 발생 할때마다 특정 로직 실행
        4. @CreatedDate         : 엔티티 생성날짜/시간 주입
        5. @LastModifiedDate    : 엔티티 [ sql : update ] 실행 되었을때 날짜/시간 주입

    4. 연관관계
        1. @JoinColumn
        2. @OneToMany( mappedBy = " " )
        3. @ManyToOne
